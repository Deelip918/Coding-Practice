#Date 18-01-2023
1. https://www.hackerrank.com/challenges/python-loops/problem
   solution:
   if __name__ == '__main__':
     n = int(input())
     for i in range(0,n):
         print(i**2)
2.https://www.hackerrank.com/challenges/write-a-function/problem?isFullScreen=true		
		
def is_leap(year):
    leap = True
    if (year % 100 == 0) and (year % 400 == 0):
        leap=True     
    elif (year % 4 ==0) and (year % 100 != 0):
        leap=True      
    else:
        leap=False      
    return leap

year = int(input())

3. https://www.hackerrank.com/challenges/python-print/problem?isFullScreen=true

if __name__ == '__main__':
    n = int(input())
    for i in range(1,n+1):
        print(i,end="")
	

#Date 20-01-2022

1. https://www.hackerrank.com/challenges/find-second-maximum-number-in-a-list/problem?isFullScreen=true
if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    max_num = max(arr)
    ru = None
    for num in arr:
        if num == max_num:
            pass
        elif ru == None:
            ru = num
        elif num > ru:
            ru = num
    print(ru)
    
2.https://www.hackerrank.com/challenges/python-string-split-and-join/problem?isFullScreen=true

def split_and_join(line):
    a = line.split(" ")
    a = "-".join(a)
    return a

line = input()
result = split_and_join(line)
print(result)

Date 20-01-2023
1. https://www.hackerrank.com/challenges/whats-your-name/problem?isFullScreen=true
def print_full_name(first, last):
   print("Hello " + first,last + "! You just delved into python.")
if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)
    
2.https://www.hackerrank.com/challenges/find-a-string/problem?isFullScreen=true
def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)-len(sub_string)+1):
        if (string[i:i+len(sub_string)] == sub_string):
            count += 1
    return count
if __name__ == '__main__':

3.https://www.hackerrank.com/challenges/swap-case/problem?isFullScreen=true

def swap_case(s):
    return s.swapcase()
if __name__ == '__main__':

4. hackerrank.com/challenges/capitalize/problem?isFullScreen=true

def solve(s):
    for x in s[:].split():
        s = s.replace(x, x.capitalize())
    return s
if __name__ == '__main__':

Date 21-01-2023
1. finding text in a string
txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.")
else:
  print("Yes, 'expensive' is present.")
  
2. slicing string
b = "Hello, World!"
print(b[2:5])

3. concatinating string
a = "Hello"
b = "World"
c = a + " " + b
print(c)

Date-22-01-2023

1. Using the list() constructor to make a List:

thislist = list(("apple", "banana", "cherry"))
print(thislist)

2. loop list()

thislist = ["apple", "banana", "cherry"]
i = 0
while i < len(thislist):
  print(thislist[i])
  i = i + 1
  
3. new list from a list
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist)

4. Appending one list to another. 

list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]

for x in list2:
  list1.append(x)

print(list1)
Date 23-01-2022
1.https://practice.geeksforgeeks.org/problems/missing-number-in-array1416/1?page=1&sortBy=submissions
class Solution:
    def MissingNumber(self,arr,n):
        total = (n + 1)*(n)//2
        sum_of_Aarray = sum(arr)
        return total - sum_of_A
	
2. function to return addition, subtraction of two given nombers
def calculation(a, b):
    add = a + b
    sub = a - b
    return add, sub
res = calculation(40, 10)
output= 50,30

3. function with default aurgument
def show_employee(name, salary=9000):
    print("Name:", name, "salary:", salary)

show_employee("Ben", 12000)
show_employee("Jessa")

output
Name: Ben salary: 12000
Name: Jessa salary: 9000

Date 24-01-2023

1. function for finding the largest number in a list
def large_number(n):
    large=n[0]
    for i in  n:
        if large<i:
            large=i
    return large
l=[1,2,3,4,5,55,33,99,5]
print("largest number",large_number(l))

2. recursive function to add up to the given number
def recursive_fun(x):
    addition = 0
    for i in range(1, x+1):
        addition = addition + i
    
    return addition
result = recursive_fun(10)
print(result)

3. function for creating list of even number in given range
def even(n):
    evennumber=[]
    for i in range(4,n+1):
        if i%2==0:
            evennumber.append(i)
    print(evennumber)
even(30)
Date 25-01-2023

1. oops
class Employee_1:  
    def __init__(self, name, age,ID):  
        self.name = name  
        self.age = age  
        self.ID = ID  
Emp = Employee_1("dk", 20, 'AAINrs')  
print(Emp.name)  
print(Emp.age)  
print(Emp.ID)  
2. oops Question 2
class Vehicle:
    def __init__(self, name, mileage, capacity):
        self.name = name
        self.mileage = mileage
        self.capacity = capacity
    print(School_bus.name , School_bus.mileage , School_bus.capacity)
School_bus =Vehicle("School Volvo", 12, 50)
26-01-2023
1. polymorphism
class cricket():
    def venue(self):
        print("Eden Gardens, Kolkata")
    def series(self):
        print("Champions Trophy")
    def chears(self):
        print("All the cricketer is in the field")
        
class Football():
    def venue(self):
        print("JWLN Stadium, Goa")
    def series(self):
        print("Indian Super League")
    def chears(self):
        print("All the footbowler is in the field")

cricmatch = cricket()
footballmatch = Football()
for game in (cricmatch, footballmatch):
    game.venue()
    game.series()
    game.chears()
    
2. cunstructor in class
class Addition:
    number1  = 0
    number2 = 0
    result = 0
    def __init__(self, f, s):
        self.number1 = f
        self.number2 = s
 
    def display(self):
        print("number 1 = " + str(self.number1))
        print("number 2 = " + str(self.number2))
        print("Addition of two numbers = " + str(self.result))
    def calculate(self):
        self.result = self.number1 + self.number2
obj1 = Addition(300, 200) 
 
obj1.calculate() 
 
obj1.display()

# Date 06-02-2023
""" fruits = ["apple", "banana"]
if "apple" in fruits:
  print("Yes, apple is a fruit!")
else:
    print("no")
    
if 5 == 10 and 4 == 4:
    print("At least one of the statements is true")
else:
    print("z")
    
fruits = ["apple", "banana", "cherry"]
fruits[0]="kiwi"
print(fruits)

fruits = ["apple", "banana", "cherry"]
fruits.insert(1,"lemon")
print(fruits)

fruits.remove("banana")
print(fruits)

fruits = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(fruits[2:5])
print(fruits)
#appending a list in 
fruits = {"apple", "banana", "cherry"}
more_fruits = ["orange", "mango", "grapes"]
fruits.update(more_fruits)
print(fruits)

fruits.discard("banana")
print(fruits)

# if and else condition

a=40
b=50
i=0
if a != b:
    print("Hello World")
# one line if condition
print("Yes") if b<a else print("no")
#while loop
a=20
b=30
i=0
while a<b:
    i=i+1
    print(i)
    a=a+1
text=("b is {} greater than a")
print(text.format(i))
#Break condition
i = 0
while i < 6:
  if i == 3:
    break
  i += 1
  print(i)
#continue statement
i = 0
while i < 6:
    i += 1
    if i == 3:
        continue
    print(i)
    
# Type of a data type
def myfun(y):
    global x
    x=y
    print(x[0:2:2])
    return x
print(type(myfun('50')))

# Date 07-02-2023
# In the loop, when the item value is "banana", jump directly to the next item.
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
print(x)

# Exit the loop when x is "banana".

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
     break
print(x)


def my_function():
    print("Hello from a function")
my_function()

# Inside a function with two parameters, print the first parameter.

def my_function(fname, lname):
    print(fname)
my_function('Deelip','Kumar')

def my_function(x):
    print(x+5)
my_function(5)
## o/p=10
# If you do not know the number of arguments that will be passed into your function, there is a prefix you can add in the function definition, which prefix?
def my_function(*rank):
    print("the number of arguments "+ rank[1])
my_function('534','34','34')
## o/p = the number of arguments 34


#If you do not know the number of keyword arguments that will be passed into your function, there is a prefix you can add in the function definition, which prefix?

def my_function(**kid):
  print("His last name is " + kid["lname"])
my_function(fname="deelip",lname="Kumar")
o/p= Kumar

# Date 10-02-2023

lst1=[10,23,30]
print(id(lst1))
lst2=lst1.copy()
print(id(lst1))
print(id(lst2))
lst2[1]=20
print(lst2)
print(lst1)
print(id(lst1))
print(id(lst2))

number1=20
number2=20
print(id(number1))
print(id(number2))
number3=10
print(id(number3))

// Date = 18-01-2023
1. Left Join

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

2. INNER Join

SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

3. Outer join

SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

4. Full join

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

5. self join

SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID = B.CustomerID
AND A.City = B.City 
ORDER BY A.City;

Date=19-01-2023

1. where condition
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';
2.order by condition
SELECT * FROM Customers
ORDER BY Country, CustomerName;
3.Insert into
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');

Date 20-01-2023

1. Null Value
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;
2.update
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
3. select top
SELECT TOP 3 * FROM Customers;
4.select max and MIN
SELECT MAX(Price) AS LargestPrice
FROM Products;
SELECT MIN(Price) AS LargestPrice
FROM Products;

5. like condition
Finds any values that start with "a"
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';

Finds any values that end with "a"
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';

Finds any values that have "or" in any position
SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';

Finds any values that start with "a" and ends with "o"
SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';

# Date 21-02-2023

IN Operator
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

BETWEEN Operator
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

Alias for Columns
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

UNION Operator
SELECT City FROM Customers
UNION ALL
SELECT City FROM Suppliers
ORDER BY City;

Date 22-01-2023

1. Insert into
INSERT INTO Persons (FirstName,LastName)
VALUES ('Lars','Monsen');

2. Date Data Type
SELECT * FROM Orders WHERE OrderDate='2008-11-11'

3. create new table
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);
4. CHECK Constraint

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

5. SQL check for Alter table

ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');
Date 23-01-2022
1. count,avg,sum
SELECT SUM(Quantity)
FROM OrderDetails;

SELECT COUNT(ProductID)
FROM Products;

SELECT AVG(Price)
FROM Products;

2. wildcards
SELECT * FROM Customers
WHERE City LIKE '[a-c]%';

SELECT * FROM Customers
WHERE City LIKE '[!acs]%';
3. case expresion
SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);

Date 24-01-2023
A. UNION:It combines two or more results from multiple SELECT queries into a single result set

SELECT columns FROM table1    
UNION    
SELECT columns FROM table2;    
B. UNION ALL:Union operator, but it does not remove the duplicate rows from the output of the SELECT statements

SELECT columns FROM table1    
UNION  ALL  
SELECT columns FROM table2;    
C. INTERSECT:returns the common records from two or more SELECT statements

SELECT columns FROM table1    
INTERSECT  
SELECT columns FROM table2;    
D.MINUS:returns the records from the first query, which is not found in the second query.

SELECT columns FROM table1    
MINUS  
SELECT columns FROM table2;   

2. subquery 
SELECT salary    
FROM   
    (SELECT salary   
     FROM employees   
     ORDER BY salary DESC   
     LIMIT 3) AS Temp   
ORDER BY salary LIMIT 1;  
Date 25-01-2023

1. Limit keyword
   SELECT salary FROM employees   
   ORDER BY salary DESC   
   LIMIT 2, 1;  
2. Using TOP Keyword
   SELECT TOP 1 salary   
   FROM   
    (SELECT DISTINCT TOP 3 salary   
     FROM employees 

     ORDER BY salary DESC) AS Temp   
   ORDER BY salary ASC;  
3. creating view from table
 CREATE VIEW email_view AS  
SELECT email FROM user_log  
WHERE country='Tokyo'; 

4. How to combine GROUP BY, ORDER BY and HAVING
SELECT Email, COUNT(*)
FROM user_log
GROUP BY Email
HAVING COUNT(*) > 1
ORDER BY UpdateDate DESC
